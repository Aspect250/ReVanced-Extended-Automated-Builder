name: Update Checker

on:
  workflow_dispatch:
  schedule:
    - cron: "*/5 * * * *"

env:
  CHECK_UPDATE: ${{ secrets.CHECK_UPDATE }}

jobs:
  check-update:
    runs-on: ubuntu-latest
    steps:
      - name: Check if .env file exists
        run: |
          if [[ ! -f .env ]]; then
            echo "The .env file was not found in the repository. Please create the .env file with the necessary variables."
            exit 0
          fi

      - name: Read CHECK_UPDATE from .env
        id: read-check-update
        run: |
          CHECK_UPDATE=$(grep -E '^CHECK_UPDATE=' .env | cut -d '=' -f2-)
          echo "::set-output name=CHECK_UPDATE::$CHECK_UPDATE"

      - name: Get latest release from $CHECK_UPDATE
        id: latest-release
        run: |
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${CHECK_UPDATE}/releases/latest" | jq -r '.tag_name')
          if [ "$LATEST_RELEASE" == "null" ]; then
            echo "Couldn't fetch latest release. Workflow halted!"
            exit 0
          fi
          echo "::set-output name=tag_name::$LATEST_RELEASE"
          
      - name: Compare with local version
        run: |
          cd apks
          LOCAL_VERSION=$(cat latest-parsed-version.md)
          if [ "$LOCAL_VERSION" == "${{ steps.latest-release.outputs.tag_name }}" ]; then
            echo "Already up-to-date!"
          else
            if ! [[ "${{ steps.latest-release.outputs.tag_name }}" =~ [0-9]+ ]]; then
              echo "Latest release tag doesn't contain any numbers. Workflow halted!"
              exit 0
            elif [ "${{ steps.latest-release.outputs.tag_name }}" == "null" ] || [ -z "${{ steps.latest-release.outputs.tag_name }}" ]; then
              echo "Latest release tag is null or empty. Workflow halted!"
              exit 0
            else
              echo "Local reported version doesn't match fetched version, updating local version and running new Build action!"
              echo "${{ steps.latest-release.outputs.tag_name }}" > latest-parsed-version.md
              git add latest-parsed-version.md
              git commit -m "Update latest-parsed-version.md"
              git push
              echo "::set-output name=trigger_build::true"
            fi
          fi
        id: compare-version

      - name: Verify local version update
        if: ${{ steps.compare-version.outputs.trigger_build == 'true' }}
        run: |
          cd apks
          UPDATED_VERSION=$(cat latest-parsed-version.md)
          if [ "$UPDATED_VERSION" == "${{ steps.latest-release.outputs.tag_name }}" ]; then
            echo "Local version updated successfully!"
          else
            echo "Error updating local version control file, halting workflow!"
            exit 1
          fi

      - name: Trigger build workflow
        if: ${{ steps.compare-version.outputs.trigger_build == 'true' }}
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: "Build & Release"
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
